# mysql
学习笔记
MySql 数据库安装
----------------------------
centos：sudo yum install mysql
Ubuntu：sudo apt-get install mysql
MySQL 登陆
----------------------------------
#mysql -u root（用户名）-p
命令的结束符，用;或者\g 结束
MySQL 服务
---------------------------------查看 MySQL 服务的状态：
[root@localhost bin]# netstat -nlp
<!--3306 端口就是 MySQL 服务器监听端口--->
（1）	启动服务：
#sudo	service mysql start
如果在启动状态，需要重启服务，可以用以下命令直接重启，而不需要先关闭再启动：
#sudo service mysql restart
（2）	关闭服务：
#sudo service mysql stop
SQL 分类
---------------------------------------------------------------------------
SQL 语句主要可以划分为以下 3 个类别。
DDL（Data Definition Languages）语句：数据定义语言，这些语句定义了不同的数据
段、数据库、表、列、索引等数据库对象的定义。常用的语句关键字主要包括 create、drop、 alter 等。
DML（Data Manipulation Language）语句：数据操纵语句，用于添加、删除、更新和
查
询数据库记录，并检查数据完整性，常用的语句关键字主要包括 insert、delete、udpate 和
select 等。
DCL（Data Control Language）语句：数据控制语句，用于控制不同数据段直接的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的
语句关键字包括 grant、revoke 等。
---------------------------------------------------------------------------
DDL 语句
--------------------------------------------------------------------------------------------
查看已有数据库
mysql> show databases;
MySQL 系统自动创建的，其各自功能如下。
--------------------------------
information_schema：主要存储了系统中的一些数据库对象信息。比如用户表信息、列信息、权限信息、字符集信息、分区信息等。
cluster：存储了系统的集群信息。 mysql：存储了系统的用户权限信息。 test：系统自动创建的测试数据库，任何用户都可以使用。
<-----------------------------使用某数据库
mysql>use dbname;
查看某数据库下的所有表
mysql>show tables;
创建数据库，命令执行如下：
mysql> create database dbname;
删除数据库可以语句：
mysql> drop database dbname;
删除数据库下某表可以使用以下命令：
mysql> drop table tabname;
----------------------------- >
在数据库中创建一张表的基本语法如下：
---------------------------------
mysql> create table tablename(字段类型(宽，整数) 限制（可选），字段类型(宽) 限制，字段类型(宽) 限制，...);
<!---字段类型 varchar、date、int、double.....--->
表改名，语法如下：
--------------------------------
mysql>alter table old_tablename rename [to] new_tablename ;
查看表信息：
--------------------------
mysql>desc tablename; 表详细信息：
mysql>show create table tabname \G;
修改表字段类型，语法如下：
--------------------------
mysql>alter table tablename modify column 字段名称修改为类型 [first（首字段）
| after（某字段之后）字段 ]（可选）；
增加字段
---------------------------
mysql>alter table emp add column 字段名类型 [first（首字段） | after（某字段
之后）字段 ]（可选）;
删除字段
--------------------------
mysql>alter table emp drop column 字段名;
字段改名
-------------------------
mysql> alter table emp change 原字段新字段类型 [first（首字段） | after（某
字段之后）字段 ]（可选） ;
<!--注意：change 和 modify 都可以修改表的定义，不同的是 change 后面需要写两次列名，不方便。
但是 change 的优点是可以修改列名称，modify 则不能。-->
--------------------------------------------------------------------------------------------------
DML 语句
--------------------------------------------------------------------------------------------------
DML 操作是指对数据库中表记录的操作，主要包括表记录的插入（insert）、更新
（update）、删除（delete）和查询（select），
是开发人员日常使用最频繁的操作.
插入记录
----------------------------------
表创建好后，就可以往里插入数据：
mysql>insert into tablename (字段,字段,.....) values(值,值,……);
也可以不用指定字段名称，但是 values 后面的顺序应该和字段的排列顺序一致：
mysql>insert into tabname values(值,值,……);
<!---------------------------------------------------------------------
对于含可空字段、非空但是含有默认值的字段、自增字段，可以不用在 insert 后的字段列表里面出现，values 后面只写对应字段名称的 value，这些没写的字段可以自动设置为
NULL、
默认值、自增的下一个数字，这样在某些情况下可以大大缩短 SQL 语句的复杂性。
---------------------------------------------------------------------->
表里的记录值，可以通过 update 命令进行更改
--------------------------------------------------
mysql>update tabname set 字段名=值 where 条件;
MySQL 中，update 命令可以同时更新多个表中数据，语法如下：
------------------------------------------------------------------------
mysql>update 表 1 a, 表 2 b...... set a.字段=值 ,b.字段=值（可以是表达式）...... where 条件;
删除记录
---------------------------------------------
mysql>delete from tablename where 要删除记录满足的条件
删除多个表中的记录
mysql>delete 表 1,表 2 from 表 1,表 2...... where 条件; <!-- delete 表 1,表 2 from 表 1,表 2 where 表 1.字段=表 2.字段;--->
如果 from 后面的表名用别名，则 delete 后面的也要用相应的别名，否则会提示语法错误。
mysql>delete a,b from tab1 a,tab2 b where a.vel=b.vel ;
#注意：不管是单表还是多表，不加 where 条件将会把表的所有记录删除，所以操作时一定要小心。
<----------------------------------------------
where 后条件：判断相等=,不等!=，并 and,或 or.>,<...|
可以是表达式，非 0 为真,0 为假.	|
---------------------------------------------->|
查询记录
---------------------------------------------------------------
mysql>select 字段,字段... from tablename [where condition](可选);
<!--'*'为所有字段-->
查询不重复的记录
-----------------------------------------------------------
有时需要将表中的记录去掉重复后显示出来，可以用 distinct 关键字来实现：
mysql>select distinct 字段，字段... from tabname;
<!--distinct 前不可有字段-->
条件查询
-----------------------------------------------------------
where 后面的条件:‘=’比较，除了‘=’外，还可以使用>、<、>=、<=、!=等比较运算符；多个条件之间还可以使用 or、and 等逻辑运算符进行多条件联合查询
排序和限制 order by
---------------------------------------------------------------
mysql>select 字段... from tablename [where 条件] order by 字段
[desc|asc] ，字段 [desc|asc] ...;
DESC 和 ASC 是排序顺序关键字，DESC 表示按照字段进行降序排列，ASC 则表示升序排列，如果不写此关键字默认是升序排列
显示一部分记录 limit
----------------------------------------------------------------
mysql> select ....... limit n(前 n 条记录);
从第 m 条记录开始，显示 n 条记录：
mysql> select ....... limit m,n;
聚合
-------------------------------------------------------------------
mysql> select [field1,field2,……fieldn] fun_name
from tablename
[where where_contition]
[group by field1,field2,……fieldn
[with rollup]]
[having where_contition];
对其参数进行以下说明。
1.	fun_name 表示要做的聚合操作，也就是聚合函数，常用的有 sum（求和）、count(*) （记录数）、max（最大值）、min（最小值）。
2.	group by 关键字表示要进行分类聚合的字段，比如要按照部门分类统计员工数量，部门就应该写在 group by 后面。
3.	with rollup 是可选语法，表明是否对分类聚合后的结果进行再汇总。
4.	having 关键字表示对分类后的结果再进行条件的过滤。
<!--注意：having 和 where 的区别在于 having 是对聚合后的结果进行条件的过滤，而 where 是在聚合前就对记录进行过滤，如果逻辑允许，我们尽可能用 where 先过滤记录，这样因为结果集减小，将对聚合的效率大大提高，最后再根据逻辑看是否用
having 进行再过滤------------------------------------------------>
表连接
------------------------------------------------------------------
当需要同时显示多个表中的字段时，就可以用表连接来实现这样的功能。
从大类上分，表连接分为内连接和外连接，它们之间的最主要区别是內连接仅选出两张表中互相匹配的记录，而外连接会选出其他不匹配的记录。
外连接分为左连接和右连接，具体定义如下。
----------------------------------
左连接：包含所有的左边表中的记录甚至是右边表中没有和它匹配的记录
mysql>	select 字段 , 字段 from	tabname1	left	join	tabname2	on tabname1.field=tabname2.field;
右连接：包含所有的右边表中的记录甚至是左边表中没有和它匹配的记录
mysql>	select 字段 , 字段 from	tabname2	right	join	tabname1	on
tabname1.field=tabname2.field;
子查询
----------------------------------------------------------------------------
某些情况下，当我们查询的时候，需要的条件是另外一个 select 语句的结果，这个时候，就
要用到子查询。用于子查询的关键字主要包括 in、not in、=、!=、exists、not exists 等
mysql> select * from tab1 where field in(select field from tab2);
子查询记录数唯一，还可以用=代替 in：
记录联合
----------------------------------------------------------------------------
select 相同字段 from table1 union|union all select 相同字段 from table2 union|union all ....
select 相同字段 from tablen ;
union 和 union all 的主要区别是 union all 是把结果集直接合并在一起，而 union 是将
union all 后的结果进行一次 distinct，去除重复记录后的结果。
DCL 语句
--------------------------------------------
DCL 语句主要是 DBA 用来管理系统中的对象权限时所使用
帮助的使用
---------------------------------------------
按照层次看帮助：如果不知道帮助能够提供些什么，可以用
“？contents”命令来显示所有可供查询的的分类
查看：? （类别名称）
<!--- ? selcet , ? where ......---->
-----------------------------------------------
MySQL 支持的数据类型
-------------------------------------------------------------------------------------------------
数值类型
--------------------------------严格数值类型
INTEGER
SMALLINT
DECIMAL NUMERIC
近似数值数据类型
FLOAT
REAL
DOUBLE PRECISION
扩展后增加了 TINYINT、MEDIUMINT 和 BIGINT 这 3 种长度不同的整型，并增加了 BIT 类型，用来存放位数据。型，其中 INT 是 INTEGER 的同名词，DEC 是 DECIMAL 的同名词。
	整数	字节
------------------------
	tinyint	1
	smallint	2
	mediumint	3
	int，integer	4
	bigint	8
浮点型数据 字节
-----------------------------
float	4 double 8 dec(M,D) M+2
	decimal(M,D)	(有效取值范围 M,D)决定
<!--浮点数和定点数都可以用类型名称后加“(M,D)”的方式来进行表示，“(M,D)” 表示该值一共显示 M 位数字（整数位+小数位），其中 D 位位于小数点后面，M 和 D 又称为精度和标度。浮点数后面跟“(M,D)”的用法是非标准用法--->
	位类型	字节
-----------------------------
	bit（M）	M=1~8
<!--超出类型范围的操作，会发生“Out of range”错误提示--> --------------------------------------------------------------------------------------------
整型数据，MySQL 还支持在类型名称后面的小括号内指定显示宽度，例如 int(5)表示当数值宽度小于 5 位的时候在数字前面填满宽度，如果不显示指定宽度则默认为
int(11)。
一般配合 zerofill 使用，顾名思义，zerofill 就是用“0”填充的意思，也就是在数字位数不够的空间用字符“0”填满。
mysql> create table tabname(id1 int,id2 int(5) zerofill);
<!--所有的整数类型都有一个可选属性 UNSIGNED（无符号)-->
<!--如果一个列指定为 zerofill，则 MySQL 自动为该列添加 UNSIGNED 属性。-->
AUTO_INCREMENT。在需要产生唯一标识符或顺序值时，这个属性只用于整数类型。 AUTO_INCREMENT 值一般从 1 开始，每行增加 1。
在插入 NULL 到一个 AUTO_INCREMENT 列时，MySQL 插入一个比该列中当前最
大值大 1 的值。 一个表中最多只能有一个 AUTO_INCREMENT 列。 对于任何想要使用
AUTO_INCREMENT 的列，应该定义为 NOT NULL，并定义为 PRIMARY KEY 或定义为 UNIQUE 键。 create table ai (id int auto_increment not null primary key); create table ai(id int auto_increment not null ,primary key(id));
create table ai (id int auto_increment not null ,unique(id));
--------------------------------------------------------------------------------------------
日期时间类型
---------------------------------------------------------------------------------
	日期和时间类型	字节	最小值	最大值
	DATE	4	1000-01-01	9999-12-31
	DATETIME	8	1000-01-01 00:00:00
23:59:59	9999-12-31
TIMESTAMP 4 19700101080001 的某个时刻	2038 年
	TIME	3	-838:59:59
	YEAR	1	1901	2155
-----------------------------------------------------------------------------------如果要用来表示年月日，通常用 DATE 来表示。
如果要用来表示年月日时分秒，通常用 DATETIME 表示。如果只用来表示时分秒，通常用 TIME 来表示。	838:59:59
如果需要经常插入或者更新日期为当前系统时间，则通常使用 TIMESTAMP 来表示。
TIMESTAMP 值返回后显示为“YYYY-MM-DD HH:MM:SS”格式的字符串，显示宽度固定为 19 个字符。如果想要获得数字值，应在 TIMESTAMP 列添加+0。
如果只是表示年份，可以用 YEAR 来表示，它比 DATE 占用更少的空间。YEAR 有 2 位或
4 位格式的年。默认是 4 位格式。在 4 位格式中，允许的值是 1901～2155 和
0000。在
2 位格式中，允许的值是 70～69，表示从 1970～2069 年。 MySQL 以 YYYY 格式显示 YEAR 值
-------------------------------------------------------------------------------------
<!--now()函数插入当前日期-->
查看当前时区：
mysql> show variables like 'time_zone';
字符串类型
-------------------------------------------------------------------------
字符串类型 字节	描述及存储需求
	-------------	------	---------------------------------
CHAR（M）	M	M 为 0～255 之间的整数
VARCHAR（M）
节		M 为 0～65535 之间的整数，值的长度+1 个字
TINYBLOB		允许长度 0～255 字节，值的长度+1 个字节
BLOB		允许长度 0～65535 字节，值的长度+2 个字节
MEDIUMBLOB		允许长度 0～167772150 字节，值的长度+3 个字节
LONGBLOB
节		允许长度 0～4294967295 字节，值的长度+4 个字
TINYTEXT		允许长度 0～255 字节，值的长度+2 个字节
TEXT		允许长度 0～65535 字节，值的长度+2 个字节
MEDIUMTEXT		允许长度 0～167772150 字节，值的长度+3 个字节
LONGTEXT		允许长度 0～4294967295 字节，值的长度+4 个字节
VARBINARY（M）
度+1 个字节	允许长度 0～M 个字节的变长字节字符串，值的长
BINARY（M）	M	允许长度 0～M 个字节的定长字节字符串
----------------------------------------------------------------------
#CHAR 列最后的空格在做操作时都已经被删除，而 VARCHAR 依然保留空格
#BINARY 和 VARBINARY 包含二进制字符串而不包含非二进制字符串
#保存 BINARY 值时，在值的最后通过填充“0x00”（零字节）以达到指定的
#字段定义长度
ENUM 类型
---------------------------
ENUM 中文名称叫枚举类型，它的值范围需要在创建表时通过枚举方式显式指定，对
1～
255 个成员的枚举需要 1 个字节存储；对于 255～65535 个成员，需要 2 个字节存储。最多
允许有 65535 个成员。
<---插入不在 ENUM 指定范围内的值时，并没有返回警告，而是插入了 enum(...)的第一值 -->
SET 类型
----------------------------
Set 和 ENUM 类型非常类似，也是一个字符串对象，里面可以包含 0～64 个成员。
根据
成员的不同，存储上也有所不同。
# 1～8 成员的集合，占 1 个字节。
# 9～16 成员的集合，占 2 个字节。
# 17～24 成员的集合，占 3 个字节。
# 25～32 成员的集合，占 4 个字节。
# 33～64 成员的集合，占 8 个字节。
Set 和 ENUM 除了存储之外，最主要的区别在于 Set 类型一次可以选取多个成员，而 ENUM 则只能选一个。
-----------------------------------------------------------------------------------
算术运算符
------------------------------------运算符	作用
------------------------------
	+	加法
	-	减法
	*	乘法
	/，DIV	除法，返回商
	%，MOD	除法，返回余数
MySQL 支持的比较运算符
----------------------------------
	运算符	作用
	=	等于
	<>或!=	不等于
<=> NULL 安全的等于(NULL-safe)
	<	小于
	<=	小于等于
	>	大于
	>=	大于等于
BETWEEN 存在与指定范围
	IN	存在于指定集合
IS NULL 为 NULL
IS NOT NULL 不为 NULL
	LIKE	通配符匹配
REGEXP 或 RLIKE 正则表达式匹配
<!--注意 NULL 不能用于“=”比较。-->
MySQL 中的逻辑运算符
-----------------------------------------运算符	作用
NOT 或！	逻辑非
AND 或&&	逻辑与
OR 或 ||	逻辑或
MySQL 支持的位运算符
------------------------------------------运算符	作用
	&	位与（位 AND）
	|	位或（位 OR ）
	^	位异或（位 XOR）
	~	位取反
	>>	位右移
	<<	位左移
清风慕竹： 1678220688
